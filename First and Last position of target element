---------------------------------------------------------------------------------------Brute-force-Approach------------------------------------------------------------------------------------------------------------

class Solution {
    public int[] searchRange(int[] nums, int target) {
      int first=-1;
      int last=-1;
      for(int i=0;i<nums.length;i++){
        if(nums[i]==target){
            if(first==-1){
                first=i;
            }
             last=i;
            
        }
      }
      if(first!=-1){
      return new int[] {first,last};  
    }else{
        return new int[] {-1,-1};
    }
    }
}
------------------------------------------------------------------------------------------------Most Opimized----------------------------------------------------------------------------------------------------------
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first = findFirstOccurrence(nums, target);
        if (first == -1) {
            return new int[] { -1, -1 }; // Target not found
        }
        
        int last = findLastOccurrence(nums, target);
        return new int[] { first, last };
    }
    
    private int findFirstOccurrence(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;
        int first = -1;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == target) {
                first = mid;
                high = mid - 1; // Continue searching in the left half
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        
        return first;
    }
    
    private int findLastOccurrence(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;
        int last = -1;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == target) {
                last = mid;
                low = mid + 1; // Continue searching in the right half
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        
        return last;
    }
}
